commit e6395bd42ee2e6822d27db7ea2d3ee8d6d96e720
Author: Whatmelon <ccacrop.code@gmail.com>
Date:   Fri Jan 24 12:47:23 2025 +0800

    1.Finish VerifyMnemonic function 2.Modify bip.ts 3.Add some tests

diff --git a/day1/wallet/bip/bip.ts b/day1/wallet/bip/bip.ts
index 2fc7850..b91d401 100644
--- a/day1/wallet/bip/bip.ts
+++ b/day1/wallet/bip/bip.ts
@@ -1,209 +1,55 @@
-const bip39 = require('bip39');
+import * as bip39 from 'bip39';
+import { GetEntropyBits, CheckMnemonicLength } from '../index';
 
-export function generateMnemonic (params: { number: any; language: any; }) {
+export function generateMnemonic(params: { number: any; language: any; }) {
   const { number, language } = params;
+
   if (!number && !language) throw new Error('Must have language and language');
-  switch (language) {
-    case 'chinese_simplified':
-      if (number === 12) {
-        return bip39.generateMnemonic(128, null, bip39.wordlists.chinese_simplified);
-      } else if (number === 15) {
-        return bip39.generateMnemonic(160, null, bip39.wordlists.chinese_simplified);
-      } else if (number === 18) {
-        return bip39.generateMnemonic(192, null, bip39.wordlists.chinese_simplified);
-      } else if (number === 21) {
-        return bip39.generateMnemonic(224, null, bip39.wordlists.chinese_simplified);
-      } else if (number === 24) {
-        return bip39.generateMnemonic(256, null, bip39.wordlists.chinese_simplified);
-      } else {
-        throw new Error("Don't support this number");
-      }
-    case 'chinese_traditional':
-      if (number === 12) {
-        return bip39.generateMnemonic(128, null, bip39.wordlists.chinese_traditional);
-      } else if (number === 15) {
-        return bip39.generateMnemonic(160, null, bip39.wordlists.chinese_traditional);
-      } else if (number === 18) {
-        return bip39.generateMnemonic(192, null, bip39.wordlists.chinese_traditional);
-      } else if (number === 21) {
-        return bip39.generateMnemonic(224, null, bip39.wordlists.chinese_traditional);
-      } else if (number === 24) {
-        return bip39.generateMnemonic(256, null, bip39.wordlists.chinese_traditional);
-      } else {
-        throw new Error("Don't support this number");
-      }
-    case 'english':
-      if (number === 12) {
-        return bip39.generateMnemonic(128, null, bip39.wordlists.english);
-      } else if (number === 15) {
-        return bip39.generateMnemonic(160, null, bip39.wordlists.english);
-      } else if (number === 18) {
-        return bip39.generateMnemonic(192, null, bip39.wordlists.english);
-      } else if (number === 21) {
-        return bip39.generateMnemonic(224, null, bip39.wordlists.english);
-      } else if (number === 24) {
-        return bip39.generateMnemonic(256, null, bip39.wordlists.english);
-      } else {
-        throw new Error("Don't support this number");
-      }
-    case 'french':
-      if (number === 12) {
-        return bip39.generateMnemonic(128, null, bip39.wordlists.french);
-      } else if (number === 15) {
-        return bip39.generateMnemonic(160, null, bip39.wordlists.french);
-      } else if (number === 18) {
-        return bip39.generateMnemonic(192, null, bip39.wordlists.french);
-      } else if (number === 21) {
-        return bip39.generateMnemonic(224, null, bip39.wordlists.french);
-      } else if (number === 24) {
-        return bip39.generateMnemonic(256, null, bip39.wordlists.french);
-      } else {
-        throw new Error("Don't support this number");
-      }
-    case 'italian':
-      if (number === 12) {
-        return bip39.generateMnemonic(128, null, bip39.wordlists.italian);
-      } else if (number === 15) {
-        return bip39.generateMnemonic(160, null, bip39.wordlists.italian);
-      } else if (number === 18) {
-        return bip39.generateMnemonic(192, null, bip39.wordlists.italian);
-      } else if (number === 21) {
-        return bip39.generateMnemonic(224, null, bip39.wordlists.italian);
-      } else if (number === 24) {
-        return bip39.generateMnemonic(256, null, bip39.wordlists.italian);
-      } else {
-        throw new Error("Don't support this number");
-      }
-    case 'japanese':
-      if (number === 12) {
-        return bip39.generateMnemonic(128, null, bip39.wordlists.japanese);
-      } else if (number === 15) {
-        return bip39.generateMnemonic(160, null, bip39.wordlists.japanese);
-      } else if (number === 18) {
-        return bip39.generateMnemonic(192, null, bip39.wordlists.japanese);
-      } else if (number === 21) {
-        return bip39.generateMnemonic(224, null, bip39.wordlists.japanese);
-      } else if (number === 24) {
-        return bip39.generateMnemonic(256, null, bip39.wordlists.japanese);
-      } else {
-        throw new Error("Don't support this number");
-      }
-    case 'korean':
-      if (number === 12) {
-        return bip39.generateMnemonic(128, null, bip39.wordlists.korean);
-      } else if (number === 15) {
-        return bip39.generateMnemonic(160, null, bip39.wordlists.korean);
-      } else if (number === 18) {
-        return bip39.generateMnemonic(192, null, bip39.wordlists.korean);
-      } else if (number === 21) {
-        return bip39.generateMnemonic(224, null, bip39.wordlists.korean);
-      } else if (number === 24) {
-        return bip39.generateMnemonic(256, null, bip39.wordlists.korean);
-      } else {
-        throw new Error("Don't support this number");
-      }
-    case 'spanish':
-      if (number === 12) {
-        return bip39.generateMnemonic(128, null, bip39.wordlists.spanish);
-      } else if (number === 15) {
-        return bip39.generateMnemonic(160, null, bip39.wordlists.spanish);
-      } else if (number === 18) {
-        return bip39.generateMnemonic(192, null, bip39.wordlists.spanish);
-      } else if (number === 21) {
-        return bip39.generateMnemonic(224, null, bip39.wordlists.spanish);
-      } else if (number === 24) {
-        return bip39.generateMnemonic(256, null, bip39.wordlists.spanish);
-      } else {
-        throw new Error("Don't support this number");
-      }
-    default:
-      throw new Error('Temporarily does not support the situation you want');
-  }
+  if (!CheckMnemonicLength(number)) throw new Error('Mnemonic length Not Standard!');
+  if (!bip39.wordlists.hasOwnProperty(language)) throw new Error('Language not supported');
+
+  return bip39.generateMnemonic(GetEntropyBits(number), undefined, bip39.wordlists[language]);
 }
 
-export function encodeMnemonic (params: { mnemonic: any; language: any; }) {
+export function encodeMnemonic(params: { mnemonic: any; language: any; }) {
   const { mnemonic, language } = params;
+
   if (!mnemonic && !language) throw new Error('Must have mnemonic and language');
-  switch (language) {
-    case 'chinese_simplified':
-      return bip39.mnemonicToEntropy(mnemonic, bip39.wordlists.chinese_simplified);
-    case 'chinese_traditional':
-      return bip39.mnemonicToEntropy(mnemonic, bip39.wordlists.chinese_traditional);
-    case 'english':
-      return bip39.mnemonicToEntropy(mnemonic, bip39.wordlists.english);
-    case 'french':
-      return bip39.mnemonicToEntropy(mnemonic, bip39.wordlists.french);
-    case 'italian':
-      return bip39.mnemonicToEntropy(mnemonic, bip39.wordlists.italian);
-    case 'japanese':
-      return bip39.mnemonicToEntropy(mnemonic, bip39.wordlists.japanese);
-    case 'korean':
-      return bip39.mnemonicToEntropy(mnemonic, bip39.wordlists.korean);
-    case 'spanish':
-      return bip39.mnemonicToEntropy(mnemonic, bip39.wordlists.spanish);
-    default:
-      throw new Error('Temporarily does not support the situation you want');
-  }
+  if (!bip39.wordlists.hasOwnProperty(language)) throw new Error('Language not supported');
+
+  return bip39.mnemonicToEntropy(mnemonic, bip39.wordlists[language]);
 }
 
-export function decodeMnemonic (params: { encrytMnemonic: any; language: any; }) {
+export function decodeMnemonic(params: { encrytMnemonic: any; language: any; }) {
   const { encrytMnemonic, language } = params;
+
   if (!encrytMnemonic && !language) throw new Error('Must have mnemonic and language');
-  switch (language) {
-    case 'chinese_simplified':
-      return bip39.entropyToMnemonic(encrytMnemonic, bip39.wordlists.chinese_simplified);
-    case 'chinese_traditional':
-      return bip39.entropyToMnemonic(encrytMnemonic, bip39.wordlists.chinese_traditional);
-    case 'english':
-      return bip39.entropyToMnemonic(encrytMnemonic, bip39.wordlists.english);
-    case 'french':
-      return bip39.entropyToMnemonic(encrytMnemonic, bip39.wordlists.french);
-    case 'italian':
-      return bip39.entropyToMnemonic(encrytMnemonic, bip39.wordlists.italian);
-    case 'japanese':
-      return bip39.entropyToMnemonic(encrytMnemonic, bip39.wordlists.japanese);
-    case 'korean':
-      return bip39.entropyToMnemonic(encrytMnemonic, bip39.wordlists.korean);
-    case 'spanish':
-      return bip39.entropyToMnemonic(encrytMnemonic, bip39.wordlists.spanish);
-    default:
-      throw new Error('Temporarily does not support the situation you want');
-  }
+  if (!bip39.wordlists.hasOwnProperty(language)) throw new Error('Language not supported');
+
+  return bip39.entropyToMnemonic(encrytMnemonic, bip39.wordlists[language]);
 }
 
-export function mnemonicToSeed (params: { mnemonic: any; password: any; }) {
+export function mnemonicToSeed(params: { mnemonic: any; password: any; }) {
   const { mnemonic, password } = params;
+
   if (!mnemonic) throw new Error('Must have mnemonic');
+
   return bip39.mnemonicToSeedSync(mnemonic, password);
 }
 
-export function mnemonicToEntropy (params: { mnemonic: any; password: any; }) {
+export function mnemonicToEntropy(params: { mnemonic: any; password: any; }) {
   const { mnemonic, password } = params;
+
   if (!mnemonic) throw new Error('Must have mnemonic');
+
   return bip39.mnemonicToEntropy(mnemonic, password);
 }
 
-export function validateMnemonic (params: { mnemonic: any; language: any; }) {
+export function validateMnemonic(params: { mnemonic: any; language: any; }) {
   const { mnemonic, language } = params;
+
   if (!mnemonic && !language) throw new Error('Must have mnemonic and language');
-  switch (language) {
-    case 'chinese_simplified':
-      return bip39.validateMnemonic(mnemonic, bip39.wordlists.chinese_simplified);
-    case 'chinese_traditional':
-      return bip39.validateMnemonic(mnemonic, bip39.wordlists.chinese_traditional);
-    case 'english':
-      return bip39.validateMnemonic(mnemonic, bip39.wordlists.english);
-    case 'french':
-      return bip39.validateMnemonic(mnemonic, bip39.wordlists.french);
-    case 'italian':
-      return bip39.validateMnemonic(mnemonic, bip39.wordlists.italian);
-    case 'japanese':
-      return bip39.validateMnemonic(mnemonic, bip39.wordlists.japanese);
-    case 'korean':
-      return bip39.validateMnemonic(mnemonic, bip39.wordlists.korean);
-    case 'spanish':
-      return bip39.validateMnemonic(mnemonic, bip39.wordlists.spanish);
-    default:
-      throw new Error('Temporarily does not support the situation you want');
-  }
+  if (!bip39.wordlists.hasOwnProperty(language)) throw new Error('Language not supported');
+
+  return bip39.validateMnemonic(mnemonic, bip39.wordlists[language]);
 }

commit 212c30d4659ca6f5eea7c9cb4cfa57b7b185e16c
Author: guoshijiang <guoshijiang2012@163.com>
Date:   Thu Jan 23 15:43:07 2025 +0800

    code submit

diff --git a/day1/wallet/bip/bip.ts b/day1/wallet/bip/bip.ts
new file mode 100644
index 0000000..2fc7850
--- /dev/null
+++ b/day1/wallet/bip/bip.ts
@@ -0,0 +1,209 @@
+const bip39 = require('bip39');
+
+export function generateMnemonic (params: { number: any; language: any; }) {
+  const { number, language } = params;
+  if (!number && !language) throw new Error('Must have language and language');
+  switch (language) {
+    case 'chinese_simplified':
+      if (number === 12) {
+        return bip39.generateMnemonic(128, null, bip39.wordlists.chinese_simplified);
+      } else if (number === 15) {
+        return bip39.generateMnemonic(160, null, bip39.wordlists.chinese_simplified);
+      } else if (number === 18) {
+        return bip39.generateMnemonic(192, null, bip39.wordlists.chinese_simplified);
+      } else if (number === 21) {
+        return bip39.generateMnemonic(224, null, bip39.wordlists.chinese_simplified);
+      } else if (number === 24) {
+        return bip39.generateMnemonic(256, null, bip39.wordlists.chinese_simplified);
+      } else {
+        throw new Error("Don't support this number");
+      }
+    case 'chinese_traditional':
+      if (number === 12) {
+        return bip39.generateMnemonic(128, null, bip39.wordlists.chinese_traditional);
+      } else if (number === 15) {
+        return bip39.generateMnemonic(160, null, bip39.wordlists.chinese_traditional);
+      } else if (number === 18) {
+        return bip39.generateMnemonic(192, null, bip39.wordlists.chinese_traditional);
+      } else if (number === 21) {
+        return bip39.generateMnemonic(224, null, bip39.wordlists.chinese_traditional);
+      } else if (number === 24) {
+        return bip39.generateMnemonic(256, null, bip39.wordlists.chinese_traditional);
+      } else {
+        throw new Error("Don't support this number");
+      }
+    case 'english':
+      if (number === 12) {
+        return bip39.generateMnemonic(128, null, bip39.wordlists.english);
+      } else if (number === 15) {
+        return bip39.generateMnemonic(160, null, bip39.wordlists.english);
+      } else if (number === 18) {
+        return bip39.generateMnemonic(192, null, bip39.wordlists.english);
+      } else if (number === 21) {
+        return bip39.generateMnemonic(224, null, bip39.wordlists.english);
+      } else if (number === 24) {
+        return bip39.generateMnemonic(256, null, bip39.wordlists.english);
+      } else {
+        throw new Error("Don't support this number");
+      }
+    case 'french':
+      if (number === 12) {
+        return bip39.generateMnemonic(128, null, bip39.wordlists.french);
+      } else if (number === 15) {
+        return bip39.generateMnemonic(160, null, bip39.wordlists.french);
+      } else if (number === 18) {
+        return bip39.generateMnemonic(192, null, bip39.wordlists.french);
+      } else if (number === 21) {
+        return bip39.generateMnemonic(224, null, bip39.wordlists.french);
+      } else if (number === 24) {
+        return bip39.generateMnemonic(256, null, bip39.wordlists.french);
+      } else {
+        throw new Error("Don't support this number");
+      }
+    case 'italian':
+      if (number === 12) {
+        return bip39.generateMnemonic(128, null, bip39.wordlists.italian);
+      } else if (number === 15) {
+        return bip39.generateMnemonic(160, null, bip39.wordlists.italian);
+      } else if (number === 18) {
+        return bip39.generateMnemonic(192, null, bip39.wordlists.italian);
+      } else if (number === 21) {
+        return bip39.generateMnemonic(224, null, bip39.wordlists.italian);
+      } else if (number === 24) {
+        return bip39.generateMnemonic(256, null, bip39.wordlists.italian);
+      } else {
+        throw new Error("Don't support this number");
+      }
+    case 'japanese':
+      if (number === 12) {
+        return bip39.generateMnemonic(128, null, bip39.wordlists.japanese);
+      } else if (number === 15) {
+        return bip39.generateMnemonic(160, null, bip39.wordlists.japanese);
+      } else if (number === 18) {
+        return bip39.generateMnemonic(192, null, bip39.wordlists.japanese);
+      } else if (number === 21) {
+        return bip39.generateMnemonic(224, null, bip39.wordlists.japanese);
+      } else if (number === 24) {
+        return bip39.generateMnemonic(256, null, bip39.wordlists.japanese);
+      } else {
+        throw new Error("Don't support this number");
+      }
+    case 'korean':
+      if (number === 12) {
+        return bip39.generateMnemonic(128, null, bip39.wordlists.korean);
+      } else if (number === 15) {
+        return bip39.generateMnemonic(160, null, bip39.wordlists.korean);
+      } else if (number === 18) {
+        return bip39.generateMnemonic(192, null, bip39.wordlists.korean);
+      } else if (number === 21) {
+        return bip39.generateMnemonic(224, null, bip39.wordlists.korean);
+      } else if (number === 24) {
+        return bip39.generateMnemonic(256, null, bip39.wordlists.korean);
+      } else {
+        throw new Error("Don't support this number");
+      }
+    case 'spanish':
+      if (number === 12) {
+        return bip39.generateMnemonic(128, null, bip39.wordlists.spanish);
+      } else if (number === 15) {
+        return bip39.generateMnemonic(160, null, bip39.wordlists.spanish);
+      } else if (number === 18) {
+        return bip39.generateMnemonic(192, null, bip39.wordlists.spanish);
+      } else if (number === 21) {
+        return bip39.generateMnemonic(224, null, bip39.wordlists.spanish);
+      } else if (number === 24) {
+        return bip39.generateMnemonic(256, null, bip39.wordlists.spanish);
+      } else {
+        throw new Error("Don't support this number");
+      }
+    default:
+      throw new Error('Temporarily does not support the situation you want');
+  }
+}
+
+export function encodeMnemonic (params: { mnemonic: any; language: any; }) {
+  const { mnemonic, language } = params;
+  if (!mnemonic && !language) throw new Error('Must have mnemonic and language');
+  switch (language) {
+    case 'chinese_simplified':
+      return bip39.mnemonicToEntropy(mnemonic, bip39.wordlists.chinese_simplified);
+    case 'chinese_traditional':
+      return bip39.mnemonicToEntropy(mnemonic, bip39.wordlists.chinese_traditional);
+    case 'english':
+      return bip39.mnemonicToEntropy(mnemonic, bip39.wordlists.english);
+    case 'french':
+      return bip39.mnemonicToEntropy(mnemonic, bip39.wordlists.french);
+    case 'italian':
+      return bip39.mnemonicToEntropy(mnemonic, bip39.wordlists.italian);
+    case 'japanese':
+      return bip39.mnemonicToEntropy(mnemonic, bip39.wordlists.japanese);
+    case 'korean':
+      return bip39.mnemonicToEntropy(mnemonic, bip39.wordlists.korean);
+    case 'spanish':
+      return bip39.mnemonicToEntropy(mnemonic, bip39.wordlists.spanish);
+    default:
+      throw new Error('Temporarily does not support the situation you want');
+  }
+}
+
+export function decodeMnemonic (params: { encrytMnemonic: any; language: any; }) {
+  const { encrytMnemonic, language } = params;
+  if (!encrytMnemonic && !language) throw new Error('Must have mnemonic and language');
+  switch (language) {
+    case 'chinese_simplified':
+      return bip39.entropyToMnemonic(encrytMnemonic, bip39.wordlists.chinese_simplified);
+    case 'chinese_traditional':
+      return bip39.entropyToMnemonic(encrytMnemonic, bip39.wordlists.chinese_traditional);
+    case 'english':
+      return bip39.entropyToMnemonic(encrytMnemonic, bip39.wordlists.english);
+    case 'french':
+      return bip39.entropyToMnemonic(encrytMnemonic, bip39.wordlists.french);
+    case 'italian':
+      return bip39.entropyToMnemonic(encrytMnemonic, bip39.wordlists.italian);
+    case 'japanese':
+      return bip39.entropyToMnemonic(encrytMnemonic, bip39.wordlists.japanese);
+    case 'korean':
+      return bip39.entropyToMnemonic(encrytMnemonic, bip39.wordlists.korean);
+    case 'spanish':
+      return bip39.entropyToMnemonic(encrytMnemonic, bip39.wordlists.spanish);
+    default:
+      throw new Error('Temporarily does not support the situation you want');
+  }
+}
+
+export function mnemonicToSeed (params: { mnemonic: any; password: any; }) {
+  const { mnemonic, password } = params;
+  if (!mnemonic) throw new Error('Must have mnemonic');
+  return bip39.mnemonicToSeedSync(mnemonic, password);
+}
+
+export function mnemonicToEntropy (params: { mnemonic: any; password: any; }) {
+  const { mnemonic, password } = params;
+  if (!mnemonic) throw new Error('Must have mnemonic');
+  return bip39.mnemonicToEntropy(mnemonic, password);
+}
+
+export function validateMnemonic (params: { mnemonic: any; language: any; }) {
+  const { mnemonic, language } = params;
+  if (!mnemonic && !language) throw new Error('Must have mnemonic and language');
+  switch (language) {
+    case 'chinese_simplified':
+      return bip39.validateMnemonic(mnemonic, bip39.wordlists.chinese_simplified);
+    case 'chinese_traditional':
+      return bip39.validateMnemonic(mnemonic, bip39.wordlists.chinese_traditional);
+    case 'english':
+      return bip39.validateMnemonic(mnemonic, bip39.wordlists.english);
+    case 'french':
+      return bip39.validateMnemonic(mnemonic, bip39.wordlists.french);
+    case 'italian':
+      return bip39.validateMnemonic(mnemonic, bip39.wordlists.italian);
+    case 'japanese':
+      return bip39.validateMnemonic(mnemonic, bip39.wordlists.japanese);
+    case 'korean':
+      return bip39.validateMnemonic(mnemonic, bip39.wordlists.korean);
+    case 'spanish':
+      return bip39.validateMnemonic(mnemonic, bip39.wordlists.spanish);
+    default:
+      throw new Error('Temporarily does not support the situation you want');
+  }
+}
